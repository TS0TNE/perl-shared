--- a/lib/perfSONAR_PS/NPToolkit/Services/MySQL.pm
+++ b/lib/perfSONAR_PS/NPToolkit/Services/MySQL.pm
@@ -9,8 +9,8 @@
     my ( $self, %conf ) = @_;
 
     $conf{description}  = "MySQL Daemon" unless $conf{description};
-    $conf{init_script} = "mysqld" unless $conf{init_script};
-    $conf{process_names} = [ "mysql" ] unless $conf{process_names};
+    $conf{init_script} = "mysql" unless $conf{init_script};
+    $conf{process_names} = [ "mysqld" ] unless $conf{process_names};
     $conf{pid_files} = [ "/var/run/mysqld/mysqld.pid" ] unless $conf{pid_files};
     $conf{regular_restart} = 1;
     $conf{package_names} = [ "mysql-server" ] unless $conf{package_names};
--- a/lib/perfSONAR_PS/NPToolkit/Services/httpd.pm
+++ b/lib/perfSONAR_PS/NPToolkit/Services/httpd.pm
@@ -11,10 +11,16 @@
     my ( $self, %conf ) = @_;
 
     $conf{description}  = "Apache HTTP Server" unless $conf{description};
-    $conf{init_script} = "httpd" unless $conf{init_script};
-    $conf{process_names} = "httpd" unless $conf{process_names};
-    $conf{pid_files} = "/var/run/httpd/httpd.pid" unless $conf{pid_files};
-    $conf{package_names} = [ "httpd" ] unless $conf{package_names};
+    $conf{init_script} = "apache2" unless $conf{init_script};
+    $conf{process_names} = "apache2" unless $conf{process_names};
+    $conf{package_names} = [ "apache2" ] unless $conf{package_names};
+
+    unless ($conf{pid_files}) {
+        if (-f "/etc/apache2/envvars") {
+            my $pid_file = `bash -c '. /etc/apache2/envvars; echo \$APACHE_PID_FILE'`;
+            $conf{pid_files} = $pid_file if $pid_file;
+        }
+    }
 
     $self->SUPER::init( %conf );
 
--- a/lib/perfSONAR_PS/NPToolkit/Services/Cassandra.pm
+++ b/lib/perfSONAR_PS/NPToolkit/Services/Cassandra.pm
@@ -15,7 +15,7 @@
     #Cassandra does not properly create /var/run/cassandra directory on boot, only creates
     #  on install which then gets removed on reboot. Removing this for now.
     #$conf{pid_files} = "/var/run/cassandra/cassandra.pid" unless $conf{pid_files};
-    $conf{package_names} = [ "cassandra20" ] unless $conf{package_names};
+    $conf{package_names} = [ "cassandra" ] unless $conf{package_names};
 
     $self->SUPER::init( %conf );
 
--- a/lib/perfSONAR_PS/NPToolkit/Services/Base.pm
+++ b/lib/perfSONAR_PS/NPToolkit/Services/Base.pm
@@ -8,6 +8,7 @@
 use fields 'LOGGER', 'INIT_SCRIPT', 'PID_FILES', 'PROCESS_NAMES', 'DESCRIPTION', 'CAN_DISABLE', 'REGULAR_RESTART', 'PACKAGE_NAMES';
 use Dpkg::Control;
 use Dpkg::Version;
+use File::Basename;
 
 sub new {
     my ( $package ) = @_;
@@ -184,17 +185,12 @@
 
     my $disabled = 1;
 
-    # turn off stderr
-    open(my $stderr, ">&STDERR");
-    open(STDERR, ">", File::Spec->devnull());
-
-    my $chkconfig_output = `/sbin/chkconfig --list $self->{INIT_SCRIPT}`;    
-
-    # restore stderr
-    open(STDERR, ">&", $stderr);
+    if (opendir(RC, "/etc/rc$curr_runlevel.d")) {
+        my @links = readdir(RC);
+        closedir(RC);
 
-    foreach my $line (split('\n', $chkconfig_output)) {
-        $disabled = 0 if ($line =~ /$curr_runlevel:on/);
+        my $service = basename($self->{INIT_SCRIPT});
+        $disabled = 0 if grep { /^S\d+$service$/ } @links;
     }
 
     return $disabled;
@@ -218,9 +214,9 @@
     open(STDERR, ">", File::Spec->devnull());
     open(STDOUT, ">", File::Spec->devnull());
 
-    system( "/sbin/chkconfig --del  " . $self->{INIT_SCRIPT} );
+    system("/usr/sbin/update-rc.d", basename($self->{INIT_SCRIPT}), "disable");
 
-    my $ret = system( "/sbin/chkconfig --add  " . $self->{INIT_SCRIPT} );
+    my $ret = system("/usr/sbin/update-rc.d", basename($self->{INIT_SCRIPT}), "enable");
 
     # restore stderr + stdout
     open(STDERR, ">&", $stderr);
@@ -247,7 +243,7 @@
     open(STDERR, ">", File::Spec->devnull());
     open(STDOUT, ">", File::Spec->devnull());
 
-    my $ret = system( "/sbin/chkconfig --del " . $self->{INIT_SCRIPT});
+    my $ret = system("/usr/sbin/update-rc.d", basename($self->{INIT_SCRIPT}), "disable");
 
     # restore stderr + stdout
     open(STDERR, ">&", $stderr);
@@ -274,7 +270,7 @@
     open(STDERR, ">", File::Spec->devnull());
     open(STDOUT, ">", File::Spec->devnull());
 
-    my $shell_cmd = "/sbin/service " . $self->{INIT_SCRIPT} . " " . $cmd;
+    my $shell_cmd = "/usr/sbin/service " . $self->{INIT_SCRIPT} . " " . $cmd;
 
     $self->{LOGGER}->debug($shell_cmd);
 
--- a/lib/perfSONAR_PS/NPToolkit/Services/NPAD.pm
+++ b/lib/perfSONAR_PS/NPToolkit/Services/NPAD.pm
@@ -24,9 +24,9 @@
 
 sub is_installed{
     my ($self) = @_;
-    my $response = `rpm -qi npad`;
+    my $response = `dpkg -l npad 2>&1`;
 
-    my $substr = 'not installed';
+    my $substr = 'no packages found';
 
     if(index($response, $substr) == -1){
         #installed
--- a/lib/perfSONAR_PS/NPToolkit/Services/NDT.pm
+++ b/lib/perfSONAR_PS/NPToolkit/Services/NDT.pm
@@ -53,9 +53,9 @@
 
 sub is_installed{
     my ($self) = @_;
-    my $response = `rpm -qi ndt`;
+    my $response = `dpkg -l ndt 2>&1`;
 
-    my $substr = 'not installed';
+    my $substr = 'no packages found';
 
     if(index($response, $substr) == -1){
         #installed
--- a/lib/perfSONAR_PS/Utils/Host.pm
+++ b/lib/perfSONAR_PS/Utils/Host.pm
@@ -503,7 +503,7 @@
 sub get_ntp_info {
     my $ntp;
 
-    my $ntp_result = `/usr/sbin/ntpdc -p`;
+    my $ntp_result = `/usr/bin/ntpdc -p`;
 
     my @ntp_response = split /\n/, $ntp_result;
     
@@ -717,16 +717,25 @@
     my $result;
 
     my $is_el7 = 0;
+    my $is_debian = 0;
 
     if (    (   $os_info->{'distribution_name'}     =~ /^CentOS/
                 || $os_info->{'distribution_name'}  =~ /^Red Hat/
             )
             && $os_info->{'distribution_version'} =~ /^7\.\d/ ) {
                 $is_el7 = 1;
+    } elsif ($os_info->{'distribution_name'} =~ /^Debian/
+            || $os_info->{'distribution_name'}  =~ /^Ubuntu/ ) {
+            $is_debian = 1;
     }
     if ( $is_el7 ) {
         $result = `/bin/systemctl is-enabled yum-cron`;
-
+    } elsif ( $is_debian ) {
+        if (-e '/etc/apt/apt.conf.d/60unattended-upgrades-perfsonar') {
+            $result = "enabled";
+        } else {
+            $result = "disabled";
+        }
     } else {
         $result = `/etc/init.d/yum-cron status`;
     }
@@ -797,7 +806,7 @@
 sub _call_sysctl {
     my ($var_name) = @_;
 
-    my $result = `sysctl $var_name`;
+    my $result = `/sbin/sysctl $var_name`;
     if($?){
         return;
     }
--- a/lib/perfSONAR_PS/NPToolkit/Services/YumCron.pm
+++ b/lib/perfSONAR_PS/NPToolkit/Services/YumCron.pm
@@ -8,40 +8,38 @@
 sub init {
     my ( $self, %conf ) = @_;
 
-    $conf{description}  = "Yum Automatic Updates" unless $conf{description};
-    $conf{init_script} = "yum-cron" unless $conf{init_script};
-    $conf{process_names} = "yum" unless $conf{process_names};
-    $conf{pid_files} = "/var/lock/yum-cron.lock/pidfile" unless $conf{pid_files};
-    $conf{package_names} = [ "yum-cron" ] unless $conf{package_names};
+    $conf{description}  = "APT Automatic Updates" unless $conf{description};
+    $conf{package_names} = [ "unattended-upgrades" ] unless $conf{package_names};
 
     $self->SUPER::init( %conf );
 
     return 0;
 }
 
+sub disable_startup {
+    my ($self) = @_;
+
+    unlink '/etc/apt/apt.conf.d/60unattended-upgrades-perfsonar';
+}
+
 sub enable_startup {
     my ($self) = @_;
 
-    unless ($self->{INIT_SCRIPT}) {
-	$self->{LOGGER}->error("No init script specified for this service");
-	return -1;
+    my $action_file = '/etc/apt/apt.conf.d/60unattended-upgrades-perfsonar';
+    my $action_fd;
+    unless (open($action_fd, '>', $action_file)) {
+        $self->{LOGGER}->error("Could not opet $action_file: $!");
+        return -1;
     }
 
-    # turn off stderr + stdout
-    open(my $stderr, ">&STDERR");
-    open(my $stdout, ">&STDOUT");
-    open(STDERR, ">", File::Spec->devnull());
-    open(STDOUT, ">", File::Spec->devnull());
-
-    my $ret = system( "chkconfig --add  " . $self->{INIT_SCRIPT} );
-    #need to run chkconfig on
-    $ret = system( "chkconfig " . $self->{INIT_SCRIPT} . " on");
-    
-    # restore stderr + stdout
-    open(STDERR, ">&", $stderr);
-    open(STDOUT, ">&", $stdout);
-
-    return $ret;
+    print $action_fd "APT::Periodic::Update-Package-Lists \"1\";\n";
+    print $action_fd "APT::Periodic::Unattended-Upgrade \"1\";\n";
+    print $action_fd "Unattended-Upgrade::Origins-Pattern:: \"origin=perfSONAR\";\n";
+
+    unless(close($action_fd)) {
+        $self->{LOGGER}->error("Could not close $action_file: $!");
+        return -1;
+    }
 }
 
 1;
--- a/lib/perfSONAR_PS/NPToolkit/Services/NetworkBase.pm
+++ b/lib/perfSONAR_PS/NPToolkit/Services/NetworkBase.pm
@@ -81,7 +81,7 @@
     open(STDERR, ">", File::Spec->devnull());
     open(STDOUT, ">", File::Spec->devnull());
 
-    my $shell_cmd = "/sbin/service configure_nic_parameters start";
+    my $shell_cmd = "/usr/sbin/service configure_nic_parameters start";
 
     $self->{LOGGER}->debug($shell_cmd);
 
--- a/lib/perfSONAR_PS/NPToolkit/Services/NTP.pm
+++ b/lib/perfSONAR_PS/NPToolkit/Services/NTP.pm
@@ -9,7 +9,7 @@
 sub init {
     my ( $self, %conf ) = @_;
 
-    $conf{init_script} = "ntpd" unless $conf{init_script};
+    $conf{init_script} = "ntp" unless $conf{init_script};
     $conf{description}  = "NTP" unless $conf{description};
     $conf{process_names} = "ntpd" unless $conf{process_names};
     $conf{pid_files} = "/var/run/ntpd.pid" unless $conf{pid_files};
